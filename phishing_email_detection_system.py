# -*- coding: utf-8 -*-
"""Phishing_Email_Detection_System.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VA-RegiBDp9A28mWvoJ32R22Ljbm0b1R

# Phishing Email Detection System

## 1. Introduction
With the exponential growth of digital communication, phishing has emerged as one of the most prevalent cybersecurity threats. Phishing emails deceive users into revealing sensitive information such as passwords, credit card details, or login credentials by masquerading as legitimate communications. The Phishing Email Detection System aims to mitigate this threat using machine learning (ML) techniques to classify emails as either phishing or legitimate in real-time.

## 2. Objectives
- To develop a machine learning-based system capable of detecting phishing emails.
- To analyze and extract key features from email content such as text, URLs, and email patterns.
- To train and evaluate ML models using a relevant dataset.
- To implement a user-friendly interface for real-time email classification.
- To gain a deeper understanding of phishing techniques and email security.

## 3. Technologies Used
- **Programming Language**: Python
- **Libraries & Frameworks**:
  - Scikit-learn (for machine learning)
  - Pandas and NumPy (for data processing)
  - Gradio (for user interface)
  - Joblib (for model serialization)

## 4. Dataset
The dataset used consists of a collection of email texts labeled as either 'phishing' or 'legitimate'. A sample dataset of over 50 emails was generated to simulate realistic email scenarios including common phishing tactics such as fake login links, account warnings, and prize claims.

**Each entry contains:**
- `text`: The content of the email
- `label`: The classification, either 'phishing' or 'legitimate'
"""

# Import Required Libraries
import pandas as pd
import numpy as np
import re
import string
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report, accuracy_score
import joblib

# Load Dataset
df = pd.read_csv("emails_dataset.csv")

# Basic Data Cleaning
def preprocess_text(text):
    text = text.lower()
    text = re.sub(r"http\S+", "url", text)
    text = re.sub(r"\S+@\S+", "email", text)
    text = re.sub(r"\d+", "number", text)
    text = re.sub(rf"[{string.punctuation}]", " ", text)
    return text

df['clean_text'] = df['text'].apply(preprocess_text)

# Label Encoding
df['label'] = df['label'].map({'phishing': 1, 'legitimate': 0})

# Split the Dataset
X_train, X_test, y_train, y_test = train_test_split(df['clean_text'], df['label'], test_size=0.2, random_state=42)

# TF-IDF Vectorization
vectorizer = TfidfVectorizer(stop_words='english', max_features=5000)
X_train_vec = vectorizer.fit_transform(X_train)
X_test_vec = vectorizer.transform(X_test)

# Train Logistic Regression Model
model = LogisticRegression()
model.fit(X_train_vec, y_train)

# Evaluate the Model
y_pred = model.predict(X_test_vec)
print("Accuracy:", accuracy_score(y_test, y_pred))
print("Classification Report:\n", classification_report(y_test, y_pred))

# Save Model and Vectorizer
joblib.dump(model, "phishing_model.pkl")
joblib.dump(vectorizer, "vectorizer.pkl")

# Predict on New Email
def predict_email(email_text):
    cleaned = preprocess_text(email_text)
    vec = vectorizer.transform([cleaned])
    prediction = model.predict(vec)[0]
    return "Phishing Email" if prediction == 1 else "Legitimate Email"

# Example
email = "Congratulations! Youâ€™ve won a prize. Click http://price.com to claim."
print(predict_email(email))

"""## Gradio Interface"""

pip install gradio

# pip install gradio
import gradio as gr
import joblib

# Load saved model and vectorizer
model = joblib.load("phishing_model.pkl")
vectorizer = joblib.load("vectorizer.pkl")

# Preprocessing function
def preprocess_text(text):
    text = text.lower()
    text = re.sub(r"http\S+", "url", text)
    text = re.sub(r"\S+@\S+", "email", text)
    text = re.sub(r"\d+", "number", text)
    text = re.sub(rf"[{string.punctuation}]", " ", text)
    return text

# Prediction function
def predict_email(email_text):
    cleaned = preprocess_text(email_text)
    vec = vectorizer.transform([cleaned])
    prediction = model.predict(vec)[0]
    return "Phishing Email" if prediction == 1 else "Legitimate Email"

# Gradio interface
interface = gr.Interface(
    fn=predict_email,
    inputs=gr.Textbox(lines=5, placeholder="Paste email content here..."),
    outputs=gr.Text(label="Prediction"),
    title="Phishing Email Detection System",
    description="Classify emails as Phishing or Legitimate using a trained Machine Learning model."
)

interface.launch()